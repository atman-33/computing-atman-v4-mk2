generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "postgresql"
    provider = "mongodb"
    url      = env("DB_URL")
}

generator nestgraphql {
    provider                = "node node_modules/prisma-nestjs-graphql"
    output                  = "../../../generated-db-types/src/lib/@generated"
    noAtomicOperations      = true
    combineScalarFilters    = true
    reExport                = Single
    emitSingle              = false
    emitCompiled            = false
    purgeOutput             = false
    // field validator
    fields_Validator_from   = "class-validator"
    fields_Validator_input  = true
    fields_Validator_output = true
    fields_Validator_model  = true
    // Args where|data nested validator
    decorate_1_type         = "*Args"
    decorate_1_field        = "@(data|where)"
    decorate_1_name         = ValidateNested
    decorate_1_from         = "class-validator"
    decorate_1_arguments    = "[]"
}

// ---- dummy for mongo db --------------------------------------- //
// This model is necessary to create IntFilter etc.
model Dummy {
    //   id       String    @id
    id      String    @id @default(auto()) @map("_id") @db.ObjectId
    date    DateTime? @default(now())
    int     Int?
    float   Float?
    bytes   Bytes?
    //   decimal  Decimal // Keep as required (for compatibility check)
    //   decimals Decimal[]
    bigInt  BigInt?
    json    Json?
    friends String[]
}

// -------------------------------------------------------------- // 

// ---- Sample -------------------------------------------------- //
model SampleTodo {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    editing   Boolean
    completed Boolean
}

model SampleUser {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    username       String
    age            Int
    hobbies        String[]
    premiumAccount Boolean
}

// -------------------------------------------------------------- //

model User {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    /// @Validator.IsEmail()
    email    String @unique
    /// @Validator.MinLength(8)
    password String
}

model Bookmark {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    /// @Validator.IsString()
    name   String
    /// @Validator.IsString()
    userId String
    /// @IsArray()
    /// @ArrayMinSize(0)
    /// @ValidateNested({ each: true })
    /// @IsString({ each: true })
    links  String[]
}
